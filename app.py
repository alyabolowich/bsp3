import psycopg2import psycopg2.extrasimport flaskfrom flask import request, jsonify, Flask# Connect to Postgrescon = psycopg2.connect("dbname=bsp3 user=postgres password=5555")cur = con.cursor(cursor_factory=psycopg2.extras.DictCursor)app = flask.Flask(__name__)app.config["DEBUG"] = True    @app.route('/', methods=['GET'])def home():    return '''<h1>Environmental and social impacts embodied in trade</h1><p>A prototype API for CO2 and vulnerable labor embodied in trade.</p>'''@app.errorhandler(404)def page_not_found(e, message="Not Found"):    return f"<h1>404</h1><p>{message}</p>", 404# Select all from agricultureco2@app.route('/api/v1/year/stressors/all')def api_all():    cur.execute('SELECT * from allco2')    record = cur.fetchall()    record = [dict(row) for row in record]    return jsonify(record)# Show all regions@app.route('/api/v1/year/stressors/regions/all')def allregions():    cur.execute('SELECT * from regions')    record = cur.fetchall()    record = [dict(row) for row in record]    return jsonify(record)@app.route('/api/v1/year/stressors/regions')def regions():    region_from = request.args.get('region_from')    region_to = request.args.get('region_to')    showall = request.args.get('showall')    query_region = 'SELECT * FROM regions;'    query = 'SELECT * FROM allco2 WHERE'    to_filter = []        # query     if region_from:        query += ' region_from=%s AND'        to_filter.append(region_from)    if region_to:        query += ' region_to=%s AND'        to_filter.append(region_to)        elif showall:        cur.execute(query_region)        results_regions = cur.fetchall()        return jsonify(results_regions)            if not (region_from or region_to):        return page_not_found(404, message="No region selected.")    query = query[:-4] + ';'        cur.execute(query, to_filter)    results = cur.fetchall()        if results==[]:        return page_not_found(404, message="Region not found.")        return jsonify(results)@app.route('/api/v1/year/stressors/details')def regsec():    region_from = request.args.get('region_from')    region_to = request.args.get('region_to')    sector_from = request.args.get('sector_from')    sector_to = request.args.get('sector_to')    query = 'SELECT * FROM allco2 WHERE'    to_filter = []    if region_from:        query += ' region_from=%s AND'        to_filter.append(region_from)    if region_to:        query += ' region_to=%s AND'        to_filter.append(region_to)    if sector_from:        query += ' sector_from=%s AND'        to_filter.append(sector_from)    if sector_to:        query += ' sector_to=%s AND'        to_filter.append(sector_to)            if not (region_from or region_to):        return page_not_found(404, message="No region selected.")    if not (sector_from or sector_to):        return page_not_found(404, message="No sector selected.")    query = query[:-4] + ';'        cur.execute(query, to_filter)    results = cur.fetchall()        if results==[]:        return page_not_found()        return jsonify(results)# =============================================================================# # @app.route('/api/v1/year/stressors/sectors/')# def sectors():#     sector_from = request.args.get('sector_from')#     sector_to = request.args.get('sector_to')# #     query = 'SELECT * FROM allco2 WHERE'#     to_filter = []# #     if sector_from:#         query += ' sector_from=%s AND'#         to_filter.append(sector_from)#     if sector_to:#         query += ' sector_to=%s AND'#         to_filter.append(sector_to)#         #     if not (sector_from or sector_to):#         return page_not_found(404, message="No sector selected.")# #     query = query[:-4] + ';'#     #     cur.execute(query, to_filter)#     results = cur.fetchall()#     #     if results==[]:#         return page_not_found()#     #     return jsonify(results)# # =============================================================================#http://127.0.0.1:5000/api/v1/year/emissions/regions?region_from=BE&region_to=AT# =============================================================================# # GOOD EXAMPLES DO NOT TOUCH# @app.route('/region/<region_id>')# def region(region_id): ## could be good to do for YEARS#     #region_id = request.args.get('id')#     cur.execute("SELECT * from region WHERE region = '{}'".format(region_id))#     record = cur.fetchone()#     #record = [dict(row) for row in record]#     return jsonify(record)# =============================================================================# =============================================================================# @app.route('/sector/<sector_id>')# def sector(sector_id): #     cur.execute("SELECT * from sectors WHERE sector = '{}'".format(sector_id))#     record = cur.fetchone()#     #record = [dict(row) for row in record]#     return jsonify(record)# =============================================================================# =============================================================================# @app.route('/<region_id>/<sector_id>')# def regsec(region_id, sector_id): #     cur.execute("SELECT * from agricultureco2 WHERE region_to='{}' AND sector = '{}'".format(region_id, sector_id))#     record = cur.fetchall()#     #record = [dict(row) for row in record]#     return jsonify(record)# =============================================================================#cur.execute("SELECT value from agricultureco2 WHERE region_to='SE' AND NOT region_from= 'SE'")# =============================================================================# #Intended output# [ {"country_from:"LU", "country_to":"DE", "amount":42}, ... ]# # for row in cursor.fetchall():# ...     results.append(dict(zip(columns, row)))# # columns = [column[0] for column in cursor.description]# # =============================================================================app.run()# =============================================================================# @app.route('/api/v1/resources/books', methods=['GET'])# def api_filter():#     query_parameters = request.args# #     id = query_parameters.get('id')#     published = query_parameters.get('published')#     author = query_parameters.get('author')# #     query = "SELECT * FROM books WHERE"#     to_filter = []# #     if id:#         query += ' id=? AND'#         to_filter.append(id)#     if published:#         query += ' published=? AND'#         to_filter.append(published)#     if author:#         query += ' author=? AND'#         to_filter.append(author)#     if not (id or published or author):#         return page_not_found(404)# #     query = query[:-4] + ';'# #     conn = sqlite3.connect('books.db')#     conn.row_factory = dict_factory#     cur = conn.cursor()# #     results = cur.execute(query, to_filter).fetchall()# #     return jsonify(results)# =============================================================================