import psycopg2import psycopg2.extrasimport flaskfrom flask import request, jsonify# Connect to Postgrescon = psycopg2.connect("dbname=bsp3 user=postgres password=5555")cur = con.cursor(cursor_factory=psycopg2.extras.DictCursor)app = flask.Flask(__name__)app.config["DEBUG"] = True#%% @app.route('/', methods=['GET'])def home():    return '''<h1>Environmental and social impacts embodied in trade</h1><p>A prototype API for CO2 and vulnerable labor embodied in trade.</p>'''#%%@app.errorhandler(Exception)def page_not_found(e=None, message="Not Found"):    return jsonify({"error" : message, "result": None})    #e was complex. the e needs something to it.    return response(404, [message])   #%%def response(status_code, data):    return jsonify({"status": status_code, "result": data})#%%@app.route('/api/v1/stressors/<string:stressor>')def show_stressor(stressor):    list_stressors = ['co2', 'vl', 'economy']    query = 'SELECT * FROM '        if stressor in list_stressors:        query = query + stressor + ';'        cur.execute(query)        record = cur.fetchall()        record = [dict(row) for row in record]        return response(200, record)    elif stressor not in list_stressors:        return response(400, "Bad request, please check the spelling of the stressor and ensure it is lowercase.")#%%# Select all from allco2# @app.route('/api/v1/stressors/all')# def api_all():#     cur.execute('SELECT * from allco2')#     record = cur.fetchall()#     record = [dict(row) for row in record]#     return response(200, record)# Test URL: http://127.0.0.1:5000/api/v1/stressors/all#%%# Show all regions@app.route('/api/v1/stressors/regions/all')def allregions():    cur.execute('SELECT * from regions;')    record = cur.fetchall()    record = [dict(row) for row in record]    return response(200, record)## Test URL: http://127.0.0.1:5000/api/v1/stressors/regions/all#%%# Get specific, region-to-region data@app.route('/api/v1/stressors/regions')def regions():    region_from = request.args.get('region_from')    region_to   = request.args.get('region_to')    query           = 'SELECT * FROM allco2 WHERE'    to_filter       = []        # query     if region_from:        query += ' region_from=%s AND'        to_filter.append(region_from)    if region_to:        query += ' region_to=%s AND'        to_filter.append(region_to)            if not (region_from or region_to):        return page_not_found(404, message="No region selected.")    query = query[:-4] + ';'        cur.execute(query, to_filter)    results = cur.fetchall()    results = [dict(row) for row in results]        if results==[]:        return page_not_found(404, message="Region not found.")        return response(200, results)## Test URL: http://127.0.0.1:5000/api/v1/stressors/regions?region_to=AT&region_from=BE#%%# Show all sectors@app.route('/api/v1/stressors/sectors/all')def allsectors():    cur.execute('SELECT * from sectors;')    record = cur.fetchall()    record = [dict(row) for row in record]    return response(200, record)## Test URL: http://127.0.0.1:5000/api/v1/stressors/sectors/all#%%# Show select regions and sectors@app.route('/api/v1/stressors/info')def regsec():    region_from = request.args.get('region_from')    region_to   = request.args.get('region_to')    sector_from = request.args.get('sector_from')    sector_to   = request.args.get('sector_to')    query = 'SELECT * FROM allco2 WHERE'    to_filter = []    if region_from:        query += ' region_from=%s AND'        to_filter.append(region_from)    if region_to:        query += ' region_to=%s AND'        to_filter.append(region_to)    if sector_from:        query += ' sector_from=%s AND'        to_filter.append(sector_from)    if sector_to:        query += ' sector_to=%s AND'        to_filter.append(sector_to)            if not (region_from or region_to):        return page_not_found(400, message="You must select a region or a sector (either to, from, or both).")    if not (sector_from or sector_to):        return page_not_found(404, message="No sector selected.")    query = query[:-4] + ';'        cur.execute(query, to_filter)    results = cur.fetchall()    results = [dict(row) for row in results]        if results==[]:        return page_not_found(400, message="Bad Request. Please ensure your syntax is correct.")        return response(200, results)## Test URL: http://127.0.0.1:5000/api/v1/stressors/info?region_from=BE&sector_from=Retail&sector_to=Manufacturing## CHANGE SELECT to non verb. ## Testing -> expect to get a list if correct, else get dict of error key#%%# Imports@app.route('/api/v1/stressors/imports')# "SELECT region_from, SUM(val) FROM allco2 WHERE region_to='SE' AND NOT region_from= 'SE' GROUP BY region_from;"def imports():    region_to = request.args.get('region')    query = 'SELECT region_from, SUM(val) FROM allco2 WHERE'    to_filter = []        query += ' region_to=%s AND NOT'    to_filter.append(region_to)    region_from = region_to    query += ' region_from=%s GROUP BY region_from;'    to_filter.append(region_from)    cur.execute(query, to_filter)    results = cur.fetchall()    results = [dict(row) for row in results]        if results==[]:        return page_not_found(400, message="Bad Request. Please ensure your syntax is correct.")        return response(200, results)# Test URL: http://127.0.0.1:5000/api/v1/stressors/imports?region=SE#%%# Exports@app.route('/api/v1/stressors/exports')# "SELECT region_from, SUM(val) FROM allco2 WHERE region_to='SE' AND NOT region_from= 'SE' GROUP BY region_from;"def exports():    region_to = request.args.get('region')    query = 'SELECT region_to, SUM(val) FROM allco2 WHERE'    to_filter = []        query += ' region_from=%s AND NOT'    to_filter.append(region_to)    region_from = region_to    query += ' region_to=%s GROUP BY region_to;'    to_filter.append(region_from)    cur.execute(query, to_filter)    results = cur.fetchall()    results = [dict(row) for row in results]        if results==[]:        return response(404, message="Bad Request. Please ensure your syntax is correct.")    return response(200, results)# Test URL: http://127.0.0.1:5000/api/v1/stressors/exports?region=LU#%%app.run()#%%# =============================================================================# # GOOD EXAMPLES DO NOT TOUCH# @app.route('/region/<region_id>')# def region(region_id): ## could be good to do for YEARS#     #region_id = request.args.get('id')#     record = cur.fetchone()#     #record = [dict(row) for row in record]#     return jsonify(record)# =============================================================================# =============================================================================# @app.route('/sector/<sector_id>')# def sector(sector_id): #     cur.execute("SELECT * from sectors WHERE sector = '{}'".format(sector_id))#     record = cur.fetchone()#     #record = [dict(row) for row in record]#     return jsonify(record)# =============================================================================# =============================================================================# @app.route('/<region_id>/<sector_id>')# def regsec(region_id, sector_id): #     cur.execute("SELECT * from agricultureco2 WHERE region_to='{}' AND sector = '{}'".format(region_id, sector_id))#     record = cur.fetchall()#     #record = [dict(row) for row in record]#     return jsonify(record)# ============================================================================# =============================================================================# #Intended output# [ {"country_from:"LU", "country_to":"DE", "amount":42}, ... ]# # for row in cursor.fetchall():# ...     results.append(dict(zip(columns, row)))# # columns = [column[0] for column in cursor.description]# # =============================================================================